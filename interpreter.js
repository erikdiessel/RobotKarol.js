// Generated by CoffeeScript 1.6.2
(function() {
  var Field, current_bool, rules, user_defined;

  current_bool = false;

  user_defined = {};

  rules = [
    {
      pattern: /^\s*Schritt([^]*)/im,
      interpreter: function() {
        this.world.karolPosition.x += this.world.karolDirection.x;
        return this.world.karolPosition.y += this.world.karolDirection.y;
      }
    }
  ];

  window.interpreter = function(world) {
    var interprete, runtime;

    runtime = {
      world: world,
      current_bool: false,
      user_defined: {}
    };
    interprete = function(code) {
      var bindings, following, rule, _i, _len;

      if (!/^\s*$/m.test(code)) {
        for (_i = 0, _len = rules.length; _i < _len; _i++) {
          rule = rules[_i];
          if (rule.pattern.test(code)) {
            bindings = rule.pattern.exec(code);
            following = bindings.pop();
            rule.interpreter.apply(runtime, bindings.splice(1, bindings.length - 1));
            interprete(following);
            return;
          }
          console.log("Syntax error at " + (code.slice(0, 50)));
        }
      }
    };
    return interprete;
  };

  window.World = (function() {
    function World(length, width, height) {
      var x, y, _i, _j;

      this.fields = [];
      for (x = _i = 0; 0 <= length ? _i <= length : _i >= length; x = 0 <= length ? ++_i : --_i) {
        this.fields[x] = [];
        for (y = _j = 0; 0 <= width ? _j <= width : _j >= width; y = 0 <= width ? ++_j : --_j) {
          this.fields[x][y] = new Field();
        }
      }
      this.karolPosition = {
        x: 0,
        y: 0
      };
      this.karolDirection = {
        x: 0,
        y: 1
      };
    }

    return World;

  })();

  Field = function() {
    this.stones_count = 0;
    return this.mark_set = false;
  };

}).call(this);
